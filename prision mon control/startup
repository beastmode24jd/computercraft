monitorc1 = peripheral.wrap("monitor_3")
term.clear()
term.setCursorPos(1,1)
write("No prisioners in!")
os.pullEvent("redstone")
if rs.getInput("right") == true then
    monitorc1.setCursorPos(1,1)
    monitorc1.write("Hello, you are in here because you did")
    monitorc1.setCursorPos(1,2)
    monitorc1.write("somrthing wrong. Pease wait to get your")
    monitorc1.setCursorPos(1,3)
    monitorc1.write("prision time. (time in cell)")
    term.setCursorPos(1,1)
    term.clear()
    print("Please enter time prisoner is to spend in cell #1:")
    function r()
      y = read()
    end
    function s()
        timerA = os.startTimer(30)
        event, completed = os.pullEvent("timer")
    end
    parallel.waitForAny(r, s )
    if event == "timer" then 
        rs.setBundledOutput("bottom",colors.white)
        sleep(5)
    end
    x = read()
    if (tonumber(x) == nil) then 
        term.clear()
        term.setCursorPos(1,1)
        print("invailed, prisioner gets out free!!!!!")
        sleep(2)   
        rs.setBundledOutput("bottom",colors.yellow)
        sleep(2)
        rs.setBundledOutput("bottom",colors.yellow)
        os.reboot()
      end    
      if (tonumber(x) < 1) then 
        term.clear()
        term.setCursorPos(1,1)
        print("invailed, prisioner gets out free!!!!!")
        sleep(2)
        rs.setBundledOutput("bottom",colors.yellow)
        sleep(2)
        rs.setBundledOutput("bottom",colors.yellow)
        os.reboot()
    end
        term.clear()
        term.setCursorPos(1,1)
        print("Ok. prisioner is in cell for "..x.." minutes")
        sec = tonumber(x) * 60
        while sec > 0 do
            term.clear()
            term.setCursorPos(1,1)
            print("prisoner in for "..sec.." seconds")
            monitorc1.clear()
            monitorc1.setCursorPos(1,1)
            monitorc1.write("You are in here for"..sec.."seconds")
            monitorc1.setCursorPos(1,2)
            monitorc1.write(x.."minutes total")
            sleep(1)
            sec = sec - 1
        end
        rs.setBundledOutput("bottom",colors.yellow)
        sleep(2)
        rs.setBundledOutput("bottom",colors.yellow)
        os.reboot()
    end

